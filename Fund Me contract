//Get funds from users
//withdraw funds
//set a minimumn funding value in USD

// SPDX-License-Identifier: MIT
pragma solidity ^0.8.18;

import {PriceConverter} from "./priceconverter.sol;"

    //constant, immutable

contract FundMe {
    Using PriceConverter for uint256;

    uint256 public constant minimumUsd = 50 * 1e18;

    address[] public funders;
    mapping(address funder => uint256 amountFunded) public addressToAmountFunded;  

    address public immutable i_owner;

    constructor(){
        i_owner = msg.sender;
    }

    function fund() public payable  {
        require(msg.value.getConversionRate() >= minimumUsd, "didnt send enough ETH"); // 1e18 = 1 ETH,= 1000000000000000000 = 1 * 10 ** 18
        funders.push(msg.sender);
        addressToAmountFunded[msg.sender] += msg.value;
    }

    function withdraw() public ononlyOwner {
        for (uint256 funderIndex=0; funderIndex < funders.length; funderIndex++){
            address funder = funders[funderIndex];
            addressToAmountFunded[funder]= 0;
        }

        funders = new address [](0);
        (bool callSuccess, ) = payable(msg.sender).call{value: address(this).balance}
        require (callSuccess, "Call failed")
    }
    
    modifier onlyOwner() {
        // require(msg.sender == i_owner, "Sender is not the owner!") ;
        IF(msg.sender != i_owner) {revert("Only the owner can call this function");}
        _;
        
    }

    }
